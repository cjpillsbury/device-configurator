{"version":3,"file":"class-map.js","sources":["../../../node_modules/lit-html/directives/class-map.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributePart, directive, PropertyPart } from '../lit-html.js';\n/**\n * Stores the ClassInfo object applied to a given AttributePart.\n * Used to unset existing values when a new ClassInfo object is applied.\n */\nconst classMapCache = new WeakMap();\n/**\n * A directive that applies CSS classes. This must be used in the `class`\n * attribute and must be the only part used in the attribute. It takes each\n * property in the `classInfo` argument and adds the property name to the\n * element's `classList` if the property value is truthy; if the property value\n * is falsey, the property name is removed from the element's `classList`. For\n * example\n * `{foo: bar}` applies the class `foo` if the value of `bar` is truthy.\n * @param classInfo {ClassInfo}\n */\nexport const classMap = directive((classInfo) => (part) => {\n    if (!(part instanceof AttributePart) || (part instanceof PropertyPart) ||\n        part.committer.name !== 'class' || part.committer.parts.length > 1) {\n        throw new Error('The `classMap` directive must be used in the `class` attribute ' +\n            'and must be the only part in the attribute.');\n    }\n    const { committer } = part;\n    const { element } = committer;\n    // handle static classes\n    if (!classMapCache.has(part)) {\n        element.className = committer.strings.join(' ');\n    }\n    const { classList } = element;\n    // remove old classes that no longer apply\n    const oldInfo = classMapCache.get(part);\n    for (const name in oldInfo) {\n        if (!(name in classInfo)) {\n            classList.remove(name);\n        }\n    }\n    // add new classes\n    for (const name in classInfo) {\n        const value = classInfo[name];\n        if (!oldInfo || value !== oldInfo[name]) {\n            // We explicitly want a loose truthy check here because\n            // it seems more convenient that '' and 0 are skipped.\n            const method = value ? 'add' : 'remove';\n            classList[method](name);\n        }\n    }\n    classMapCache.set(part, classInfo);\n});\n//# sourceMappingURL=class-map.js.map"],"names":["classMapCache","WeakMap","classMap","directive","classInfo","part","AttributePart","PropertyPart","committer","name","parts","length","Error","element","has","className","strings","join","classList","oldInfo","get","remove","value","set"],"mappings":";;;;;;;;;;;;;GAkBA,MAAMA,EAAgB,IAAIC,QAWbC,EAAWC,EAAWC,GAAeC,IAC9C,KAAMA,aAAgBC,IAAmBD,aAAgBE,GAC7B,UAAxBF,EAAKG,UAAUC,MAAoBJ,EAAKG,UAAUE,MAAMC,OAAS,EACjE,MAAM,IAAIC,MAAM,8GAGpB,MAAMJ,UAAEA,GAAcH,GAChBQ,QAAEA,GAAYL,EAEfR,EAAcc,IAAIT,KACnBQ,EAAQE,UAAYP,EAAUQ,QAAQC,KAAK,MAE/C,MAAMC,UAAEA,GAAcL,EAEhBM,EAAUnB,EAAcoB,IAAIf,GAClC,IAAK,MAAMI,KAAQU,EACTV,KAAQL,GACVc,EAAUG,OAAOZ,GAIzB,IAAK,MAAMA,KAAQL,EAAW,CAC1B,MAAMkB,EAAQlB,EAAUK,GACxB,IAAKU,GAAWG,IAAUH,EAAQV,GAAO,CAIrCS,EADeI,EAAQ,MAAQ,UACbb,IAG1BT,EAAcuB,IAAIlB,EAAMD"}